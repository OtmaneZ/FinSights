import type { NextApiRequest, NextApiResponse } from 'next'
import { analyzeDataCapabilities, generateAdaptiveResponse } from '@/lib/adaptiveCapabilities'

// Types pour les requ√™tes copilot
interface CopilotRequest {
    message: string
    context?: {
        finSightData?: any
        rawData?: any[]
        conversationHistory?: Array<{
            role: 'user' | 'assistant'
            content: string
            timestamp: string
        }>
    }
}

interface CopilotResponse {
    success: boolean
    response?: string
    suggestions?: string[]
    actions?: Array<{
        type: string
        label: string
        data: any
    }>
    error?: string
}

export default async function handler(
    req: NextApiRequest,
    res: NextApiResponse<CopilotResponse>
) {
    // Validation m√©thode
    if (req.method !== 'POST') {
        return res.status(405).json({
            success: false,
            error: 'M√©thode non autoris√©e. Utilisez POST.'
        })
    }

    try {
        const { message, context }: CopilotRequest = req.body

        // Validation du message
        if (!message || typeof message !== 'string' || message.trim().length === 0) {
            return res.status(400).json({
                success: false,
                error: 'Message requis et non vide.'
            })
        }

        console.log('ü§ñ Copilot - Requ√™te re√ßue:', {
            message: message.substring(0, 100) + '...',
            hasContext: !!context,
            hasFinSightData: !!context?.finSightData,
            hasRawData: !!context?.rawData
        })

        // ‚ú® NOUVEAU MOTEUR ADAPTATIF
        if (context?.finSightData && context?.rawData) {
            const capabilities = analyzeDataCapabilities(context.finSightData, context.rawData)
            console.log('üß† Capacit√©s d√©tect√©es:', capabilities)

            const adaptiveResponse = generateAdaptiveResponse(message, capabilities, context.finSightData, context.rawData)

            return res.status(200).json({
                success: true,
                response: adaptiveResponse,
                suggestions: generateSuggestions(message, capabilities),
                actions: []
            })
        }

        // Fallback pour compatibilit√© (ancien syst√®me)
        console.log('‚ö†Ô∏è Fallback vers ancien syst√®me')

        // Analyse du contexte financier
        const financialContext = context?.finSightData ? analyzeFinancialContext(context.finSightData) : null

        // G√©n√©ration de la r√©ponse bas√©e sur le contexte
        const response = await generateResponse(message, financialContext, context?.finSightData, context?.conversationHistory)

        // G√©n√©ration de suggestions contextuelles
        const suggestions = generateSuggestions(message, financialContext)

        // G√©n√©ration d'actions possibles
        const actions = generateActions(message, financialContext)

        return res.status(200).json({
            success: true,
            response,
            suggestions,
            actions
        })

    } catch (error) {
        console.error('‚ùå Erreur Copilot:', error)

        return res.status(500).json({
            success: false,
            error: 'Erreur interne du serveur lors de la g√©n√©ration de la r√©ponse.'
        })
    }
}

/**
 * Analyse le contexte financier pour extraire les informations cl√©s
 */
function analyzeFinancialContext(finSightData: any): string {
    if (!finSightData) return ''

    const contextParts: string[] = []

    // Informations sur la p√©riode
    if (finSightData.period) {
        contextParts.push(`P√©riode analys√©e: ${finSightData.period.label}`)
    }

    // KPIs principaux
    if (finSightData.kpis) {
        const kpis = finSightData.kpis

        if (kpis.revenue) {
            contextParts.push(`Chiffre d'affaires: ${kpis.revenue.formatted} (${kpis.revenue.changeFormatted})`)
        }

        if (kpis.cashFlow) {
            contextParts.push(`Tr√©sorerie: ${kpis.cashFlow.formatted} (${kpis.cashFlow.changeFormatted})`)
        }

        if (kpis.margin) {
            contextParts.push(`Marge: ${kpis.margin.formatted} (${kpis.margin.changeFormatted})`)
        }

        if (kpis.dso) {
            contextParts.push(`DSO: ${kpis.dso.formatted} (${kpis.dso.changeFormatted})`)
        }
    }

    // Informations sur les donn√©es
    if (finSightData.recordCount) {
        contextParts.push(`${finSightData.recordCount} transactions analys√©es`)
    }

    // Niveau de donn√©es d√©tect√©
    if (finSightData.levelInfo) {
        contextParts.push(`Niveau de donn√©es: ${finSightData.levelInfo.description}`)
    }

    return contextParts.join('. ')
}

/**
 * G√©n√®re une r√©ponse contextualis√©e bas√©e sur les donn√©es financi√®res
 */
async function generateResponse(message: string, financialContext: string | null, finSightData?: any, history?: any[]): Promise<string> {
    const messageLower = message.toLowerCase()

    // R√©ponses sp√©cialis√©es selon le contexte
    if (!financialContext) {
        return generateNoDataResponse(message)
    }

    // Analyse des KPIs
    if (messageLower.includes('chiffre') || messageLower.includes('revenue') || messageLower.includes('ca')) {
        return generateRevenueAnalysis(financialContext)
    }

    if (messageLower.includes('tr√©sorerie') || messageLower.includes('cash') || messageLower.includes('liquidit√©')) {
        return generateCashFlowAnalysis(financialContext)
    }

    if (messageLower.includes('marge') || messageLower.includes('margin') || messageLower.includes('rentabilit√©')) {
        return generateMarginAnalysis(financialContext)
    }

    if (messageLower.includes('dso') || messageLower.includes('d√©lai') || messageLower.includes('paiement')) {
        return generateDSOAnalysis(financialContext, finSightData)
    }

    if (messageLower.includes('recommandation') || messageLower.includes('conseil') || messageLower.includes('action')) {
        return generateRecommendations(financialContext)
    }

    // Analyse g√©n√©rale
    return generateGeneralAnalysis(message, financialContext, finSightData)
}

/**
 * R√©ponse quand aucune donn√©e n'est disponible
 */
function generateNoDataResponse(message: string): string {
    return `ü§ñ **Copilote FinSight**

Bonjour ! Je suis votre assistant financier IA, mais je n'ai pas encore acc√®s √† vos donn√©es financi√®res.

**Pour une analyse personnalis√©e :**
1. üìÅ Importez votre fichier CSV via le bouton "Import Donn√©es"
2. üìä Vos KPIs s'afficheront automatiquement
3. üí¨ Je pourrai alors r√©pondre √† vos questions avec vos vraies donn√©es

**Exemples de questions que je peux traiter :**
- "Analyse mon chiffre d'affaires"
- "Comment am√©liorer ma tr√©sorerie ?"
- "Quelles sont mes recommandations prioritaires ?"

**En attendant, posez-moi une question g√©n√©rale sur la gestion financi√®re !** üí°`
}

/**
 * Analyse du chiffre d'affaires
 */
function generateRevenueAnalysis(context: string): string {
    return `üìä **Analyse Chiffre d'Affaires**

Bas√© sur vos donn√©es actuelles :
${context}

**Points cl√©s :**
- üìà √âvolution du CA par rapport √† la p√©riode pr√©c√©dente
- üéØ Performance vs objectifs
- üìÖ Saisonnalit√© et tendances

**Recommandations :**
- Analyser les facteurs de croissance/d√©croissance
- Identifier les segments les plus performants
- Planifier les actions commerciales pour les prochains mois

Souhaitez-vous que j'approfondisse un aspect particulier ?`
}

/**
 * Analyse de la tr√©sorerie
 */
function generateCashFlowAnalysis(context: string): string {
    return `üí∞ **Analyse Tr√©sorerie**

Situation actuelle :
${context}

**√âl√©ments d'analyse :**
- üîÑ Flux entrants vs sortants
- ‚è∞ D√©lais de paiement clients/fournisseurs
- üìà Projection √† 30/60/90 jours

**Actions prioritaires :**
- Optimiser le recouvrement clients
- N√©gocier les d√©lais fournisseurs
- Anticiper les besoins de financement

Voulez-vous une projection de tr√©sorerie d√©taill√©e ?`
}

/**
 * Analyse de la marge
 */
function generateMarginAnalysis(context: string): string {
    return `üìâ **Analyse Rentabilit√©**

Vos marges actuelles :
${context}

**Leviers d'optimisation :**
- üí∞ Prix de vente et politique tarifaire
- üì¶ Co√ªts d'achat et n√©gociation fournisseurs
- ‚ö° Efficacit√© op√©rationnelle

**Benchmark secteur :**
- Comparer vos marges aux standards du march√©
- Identifier les √©carts de performance

Souhaitez-vous une analyse d√©taill√©e par produit/service ?`
}

/**
 * Analyse DSO avec vraies donn√©es
 */
function generateDSOAnalysis(context: string, finSightData: any): string {
    // Extraire les vraies donn√©es DSO
    let dsoValue = 'Non calcul√©';
    let dsoChange = '';
    let recordCount = 0;
    let periodLabel = 'P√©riode inconnue';
    let canCalculateDSO = false;

    if (finSightData?.kpis?.dso) {
        dsoValue = finSightData.kpis.dso.formatted || finSightData.kpis.dso.value;
        dsoChange = finSightData.kpis.dso.changeFormatted || '';
        canCalculateDSO = true;
    }

    if (finSightData?.recordCount) {
        recordCount = finSightData.recordCount;
    }

    if (finSightData?.period?.label) {
        periodLabel = finSightData.period.label;
    }

    // Si on ne peut pas calculer le DSO, expliquer pourquoi
    if (!canCalculateDSO) {
        return `‚è±Ô∏è **Analyse D√©lais de Paiement**

‚ùå **Je ne peux pas calculer votre DSO avec ces donn√©es**

üìä **Donn√©es disponibles** : ${recordCount} transactions ‚Ä¢ ${periodLabel}

**Il me manque pour calculer le DSO :**
- üìÖ **Dates d'√©ch√©ance** des factures clients
- üí∞ **Statut des paiements** (pay√©/impay√©/en retard)
- üìã **Distinction claire** entre factures et encaissements

**Pour obtenir votre DSO, ajoutez ces colonnes √† votre CSV :**
- \`Date_facture\`, \`Date_echeance\`, \`Date_paiement\`, \`Statut\`
- Ou \`Facture_numero\`, \`Client\`, \`Echeance\`, \`Paye\`

**Ce que je peux analyser actuellement :**
- üí∞ Chiffre d'affaires et flux de tr√©sorerie
- üìä R√©partition par clients et montants
- üìà √âvolution mensuelle des ventes

Voulez-vous que j'analyse un autre aspect de vos finances ?`;
    }

    // Si on peut calculer le DSO (code existant)
    let impactEstimate = '';
    if (finSightData?.kpis?.revenue?.value && typeof finSightData.kpis.revenue.value === 'number') {
        const monthlyRevenue = finSightData.kpis.revenue.value;
        const impactReduction10j = Math.round((monthlyRevenue / 30) * 10);
        impactEstimate = `- Une r√©duction de 10 jours lib√©rerait environ ${impactReduction10j.toLocaleString('fr-FR')} ‚Ç¨ de tr√©sorerie`;
    } else {
        impactEstimate = '- Une r√©duction de 10 jours lib√®re de la tr√©sorerie';
    }

    return `‚è±Ô∏è **Analyse D√©lais de Paiement**

**Votre DSO actuel : ${dsoValue}** ${dsoChange ? `(${dsoChange})` : ''}
üìä P√©riode analys√©e: ${periodLabel}
üìà ${recordCount} transactions analys√©es
${finSightData?.levelInfo?.description ? `üí° ${finSightData.levelInfo.description}` : ''}

**Impact tr√©sorerie :**
${impactEstimate}
- Am√©lioration du BFR et du cash-flow op√©rationnel

**Actions concr√®tes recommand√©es :**
- üìû Relances clients syst√©matiques d√®s J+15
- üí≥ Faciliter les paiements (CB, virement instantan√©)
- üìã R√©viser conditions de paiement (30j ‚Üí 15j nets)
- üéØ Focus sur les gros montants en retard

${recordCount < 50 ? 'üí° **Conseil** : Importez plus de donn√©es historiques pour des recommandations personnalis√©es.' : ''}

Voulez-vous un plan d'action d√©taill√© pour r√©duire votre DSO ?`
}

/**
 * Recommandations g√©n√©rales
 */
function generateRecommendations(context: string): string {
    return `üéØ **Recommandations Prioritaires**

Bas√© sur votre situation :
${context}

**Actions imm√©diates (0-30 jours) :**
- üî¥ Urgent : Relancer les impay√©s > 45 jours
- üü° Important : Optimiser les processus de facturation

**Actions moyen terme (1-3 mois) :**
- üìä Mettre en place un tableau de bord temps r√©el
- ü§ù N√©gocier avec les fournisseurs strat√©giques

**Actions long terme (3-12 mois) :**
- üöÄ D√©velopper de nouveaux segments clients
- üí° Investir dans l'automatisation

Souhaitez-vous d√©tailler l'une de ces recommandations ?`
}

/**
 * Analyse g√©n√©rale avec vraies donn√©es
 */
function generateGeneralAnalysis(message: string, context: string, finSightData?: any): string {
    let dataInsight = '';

    if (finSightData) {
        const recordCount = finSightData.recordCount || 0;
        const periodLabel = finSightData.period?.label || 'P√©riode inconnue';
        const levelDescription = finSightData.levelInfo?.description || 'Analyse disponible';

        dataInsight = `üìä **Vos donn√©es** : ${recordCount} transactions ‚Ä¢ ${periodLabel}
üí° **Niveau d'analyse** : ${levelDescription}

`;
    }

    return `ü§ñ **Analyse FinSight**

Votre question : "${message}"

${dataInsight}**Contexte financier :**
${context}

**√âl√©ments de r√©ponse :**
- üìä Analyse bas√©e sur vos donn√©es r√©elles
- üéØ Recommandations personnalis√©es selon votre profil
- üìà Comparaison avec les bonnes pratiques sectorielles

**Pour aller plus loin :**
Posez-moi une question plus sp√©cifique sur :
- üí∞ Tr√©sorerie et cash-flow
- üìä Rentabilit√© et marges
- ‚è∞ D√©lais de paiement
- üéØ Recommandations d'actions

Comment puis-je vous aider davantage ?`
}

/**
 * G√©n√®re des suggestions contextuelles selon les capacit√©s
 */
function generateSuggestions(message: string, capabilities: any): string[] {
    const suggestions = []

    if (capabilities.canCalculateRevenue) {
        suggestions.push("Analyse mon chiffre d'affaires d√©taill√©")
    }

    if (capabilities.canAnalyzeClients) {
        suggestions.push("Quels sont mes meilleurs clients ?")
    }

    if (capabilities.canCalculateDSO) {
        suggestions.push("Calcule mon d√©lai de paiement moyen")
    } else {
        suggestions.push("Comment am√©liorer mes donn√©es pour le DSO ?")
    }

    if (capabilities.canProjectFuture) {
        suggestions.push("Projette ma tr√©sorerie sur 3 mois")
    }

    suggestions.push("Quelles sont mes capacit√©s d'analyse ?")

    return suggestions
}

/**
 * G√©n√®re des actions possibles
 */
function generateActions(message: string, financialContext: string | null): Array<{ type: string; label: string; data: any }> {
    const actions = []

    if (financialContext) {
        actions.push(
            {
                type: 'export_analysis',
                label: 'üìÑ Exporter cette analyse',
                data: { format: 'pdf', include: ['kpis', 'recommendations'] }
            },
            {
                type: 'schedule_review',
                label: 'üìÖ Programmer un point CFO',
                data: { duration: 15, topic: 'financial_review' }
            },
            {
                type: 'create_alert',
                label: 'üîî Cr√©er une alerte KPI',
                data: { type: 'threshold', metric: 'cash_flow' }
            }
        )
    } else {
        actions.push(
            {
                type: 'upload_data',
                label: 'üìÅ Importer mes donn√©es',
                data: { redirect: '/dashboard#upload' }
            }
        )
    }

    return actions
}